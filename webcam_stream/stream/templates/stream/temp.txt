<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Webcam and Map</title>
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=a27a75108343a33421b584b13f9e806e&libraries=services,clusterer,drawing"></script>
    <style>
        body {
            background-image: linear-gradient(to bottom, #EEFFDD 5%, white);
        }
        .container1 {
            display: flex;  /* Flexbox 레이아웃 사용 */
            flex-direction: column;  /* 세로로 요소 배치 */
            align-items: center;  /* 가로 중앙 정렬 */
            margin: 20px;  /* 외부 여백 */
        }
        .container2 {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .content {
            display: flex;
            width: 100%;
            justify-content: flex-start; /* 왼쪽 정렬 */
            align-items: flex-start; /* 상단 정렬 */
        }
        .wrapper {
            display: flex;
            justify-content: space-between;  /* 좌우로 나란히 배치 */
            width: 80%;  /* 컨테이너의 80% 너비 사용 */
            margin-bottom: 20px;  /* 아래쪽 외부 여백 */
        }
        .media {
            width: 48%;  /* 각 미디어 요소의 너비 설정 */
            border: 1px solid #ccc;  /* 테두리 추가 */
        }
        .photos {
            display: flex;
            justify-content: space-between;  /* 사진들을 좌우로 나란히 배치 */
            width: 80%;  /* 컨테이너의 80% 너비 사용 */
        }
        .photo {
            width: 48%;  /* 각 사진의 너비 설정 */
            margin-top: 20px;  /* 위쪽 외부 여백 */
        }
        .map {
            flex: 1;
        }
        
    </style>
</head>
<body>
    <div class="container1">
        <h1>Webcam and Map</h1>
        <div class="wrapper">
            <!-- 웹캠 영상 -->
            <img class="media" src="{% url 'live_stream' %}" width="640" height="640" />
            <!-- 지도 -->
            <div id="map" class="map" style="width:640px;height:640px;"></div>
        </div>

        <script>
            var mapContainer = document.getElementById('map');
            var mapOption = {
                center: new kakao.maps.LatLng(37.32191670389041, 127.12659215409288), // 지도 중심 좌표(단국대학교 범정관)
                level: 3 // 지도 확대 레벨
            };
            var map = new kakao.maps.Map(mapContainer, mapOption); // 지도 생성

            var mapTypeControl = new kakao.maps.MapTypeControl(); // 지도 타입 변경 컨트롤 생성

            map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT); // 지도 타입 변경 컨트롤 추가


            var zoomControl = new kakao.maps.ZoomControl(); // 지도 확대 축소 컨트롤 생성


            map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT); // 확대 축소 컨트롤을 추가(버튼)



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            // 고정 마커에 쓰일 마커 이미지 정의
            var imageSrc1 = 'https://static.thenounproject.com/png/747721-200.png', // 마커 이미지 주소 
                imageSize1 = new kakao.maps.Size(40, 40), // 마커 이미지 크기
                imageOption1 = {offset: new kakao.maps.Point(20, 40)}; // 마커이미지 옵션(마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정)
      

            // 고정 마커1 위치, 마커 이미지 지정
            var markerImage1 = new kakao.maps.MarkerImage(imageSrc1, imageSize1, imageOption1),
                markerPosition1  = new kakao.maps.LatLng(37.322572344508146, 127.12751135210019);     
            
            // 고정 마커1 생성
            var marker1 = new kakao.maps.Marker({
                position: markerPosition1,
                clickable: true,
                image: markerImage1
            });

            // 고정 마커1 지도 위에 표시
            marker1.setMap(map);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            // 고정 마커2 위치, 마커 이미지 지정
            var markerImage2 = new kakao.maps.MarkerImage(imageSrc1, imageSize1, imageOption1),
                markerPosition2  = new kakao.maps.LatLng(37.32056838722466, 127.1267288023802);     
            
            // 고정 마커2 생성
            var marker2 = new kakao.maps.Marker({
                position: markerPosition2,
                clickable: true,
                image: markerImage2
            });

            // 고정 마커2 지도 위에 표시
            marker2.setMap(map);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            // 고정 마커1을 클릭했을 때 마커 위에 표시할 인포윈도우 생성
            var iwContent = '<div style="padding:5px;">Camera 1</div>', // 인포윈도우에 표출될 내용(HTML or document element)
                iwRemoveable = true; // removeable 속성을 ture로 설정 => 인포윈도우를 닫을 수 있는 x버튼 표시

            // 고정 마커1 인포윈도우 생성
            var infowindow = new kakao.maps.InfoWindow({
                content : iwContent,
                removable : iwRemoveable
            });

            // 고정 마커1에 클릭이벤트 등록
            kakao.maps.event.addListener(marker1, 'click', function() {
                // 고정 마커1 위에 인포윈도우 표시
                infowindow.open(map, marker1);  
            });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            
            // 고정 마커2를 클릭했을 때 마커 위에 표시할 인포윈도우 생성
            var iwContent2 = '<div style="padding:5px;">Camera 2</div>', // 인포윈도우에 표출될 내용(HTML or document element)
                iwRemoveable2 = true; // removeable 속성을 ture로 설정 => 인포윈도우를 닫을 수 있는 x버튼 표시

            // 고정 마커2 인포윈도우 생성
            var infowindow2 = new kakao.maps.InfoWindow({
                content : iwContent2,
                removable : iwRemoveable2
            });

            // 고정 마커2에 클릭이벤트 등록
            kakao.maps.event.addListener(marker2, 'click', function() {
                // 고정 마커2 위에 인포윈도우 표시
                infowindow2.open(map, marker2);  
            });

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 소프트웨어관 카메라 마커 관련

             // 마커에 쓰일 마커 이미지 정의
             var imageSrc = 'https://cdn-icons-png.flaticon.com/512/7334/7334593.png', // 마커 이미지 주소 
                imageSize = new kakao.maps.Size(20, 20), // 마커 이미지 크기
                imageOption = {offset: new kakao.maps.Point(10, 20)}; // 마커이미지 옵션(마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정)
      

            // 마커 이미지 지정
            var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption)

             // 마커 변수
             var marker = new kakao.maps.Marker({
                map: map,
                position: markerPosition1, // 초기 좌표 카메라(고정 마커)와 일치시키기
                image: markerImage
            });

            function updateMarkerPosition(position) {
                var latlng = new kakao.maps.LatLng(position.lat, position.lng);
                marker.setPosition(latlng);
            }

            // 주기적으로 서버에서 좌표를 가져와서 마커 위치 업데이트
            setInterval(function() {
                fetch('/get_object_location/')
                    .then(response => response.json())
                    .then(data => {
                        updateMarkerPosition(data);
                    });
            }, 500); // 0.5초마다 업데이트

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 공학관 카메라 마커 관련

            var marker3 = new kakao.maps.Marker({
                map: map,
                position: markerPosition2, // 초기 좌표 카메라(고정 마커)와 일치시키기
                image: markerImage
            });



            function updateMarkerPosition2(position) {
                var latlng3 = new kakao.maps.LatLng(position.lat, position.lng);
                marker3.setPosition(latlng3);
            }

            // 주기적으로 서버에서 좌표를 가져와서 마커 위치 업데이트
            setInterval(function() {
                fetch('/get_object_location2/')
                    .then(response => response.json())
                    .then(data => {
                        updateMarkerPosition2(data);
                    });
            }, 300); // 0.3초마다 업데이트



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            // Toolbox 관련 코드
            var strokeColor = '#f2432f',
                fillColor = '#fbcfca',
                fillOpacity = 0.5,
                hintStrokeStyle = 'dash';

            var options = { // Drawing Manager를 생성할 때 사용할 옵션
                map: map, // Drawing Manager로 그리기 요소를 그릴 map 객체
                drawingMode: [
                    kakao.maps.Drawing.OverlayType.MARKER,
                    kakao.maps.Drawing.OverlayType.ARROW,
                    kakao.maps.Drawing.OverlayType.POLYLINE,
                    kakao.maps.Drawing.OverlayType.RECTANGLE,
                    kakao.maps.Drawing.OverlayType.CIRCLE,
                    kakao.maps.Drawing.OverlayType.ELLIPSE,
                    kakao.maps.Drawing.OverlayType.POLYGON
                ],
                // 사용자에게 제공할 그리기 가이드 툴팁
                // 사용자에게 도형을 그릴때, 드래그할때, 수정할때 가이드 툴팁을 표시하도록 설정
                guideTooltip: ['draw', 'drag', 'edit'], 
                markerOptions: {
                    draggable: true,
                    removable: true
                },
                arrowOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    hintStrokeStyle: hintStrokeStyle
                },
                polylineOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    hintStrokeStyle: hintStrokeStyle
                },
                rectangleOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    fillColor: fillColor,
                    fillOpacity: fillOpacity
                },
                circleOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    fillColor: fillColor,
                    fillOpacity: fillOpacity
                },
                ellipseOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    fillColor: fillColor,
                    fillOpacity: fillOpacity
                },
                polygonOptions: {
                    draggable: true,
                    removable: true,
                    strokeColor: strokeColor,
                    fillColor: fillColor,
                    fillOpacity: fillOpacity
                }
            };


            // 위에 작성한 옵션으로 Drawing Manager 생성
            var manager = new kakao.maps.Drawing.DrawingManager(options);

            // Toolbox 생성 
            // Toolbox 생성 시 위에서 생성한 DrawingManager 객체를 설정
            // DrawingManager 객체를 꼭 설정해야만 그리기 모드와 매니저의 상태를 툴박스에 설정할 수 있도록 구성
            var toolbox = new kakao.maps.Drawing.Toolbox({drawingManager: manager});

            // 지도 위에 Toolbox 표시
            // kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의(TOP은 위 가운데를 의미)
            map.addControl(toolbox.getElement(), kakao.maps.ControlPosition.TOP);
                        
        </script>
    </body>
    </html>


















// views.py backup


# 뷰 정의! 웹캠 영상 처리 함수, 템플릿 렌더링 함수 포함
import cv2
from django.http import StreamingHttpResponse, JsonResponse
from django.views.decorators import gzip
from django.shortcuts import render
import random

def get_frame():
    camera = cv2.VideoCapture(0)
    while True:
        ret, frame = camera.read()
        if not ret:
            break

        frame = cv2.flip(frame, 1) 

        _, jpeg = cv2.imencode('.jpg', frame)
        frame = jpeg.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')

@gzip.gzip_page
def live_stream(request):
    return StreamingHttpResponse(get_frame(), content_type="multipart/x-mixed-replace;boundary=frame")

def index(request):
    return render(request, 'stream/index.html')

def get_object_location(request):
    # 예시 좌표 생성 (실제로는 depth 카메라에서 얻은 좌표를 사용), (단국대학교 소프트웨어관 주변 좌표 이용)
    object_location = {
        'lat': random.uniform(37.322558865511766, 37.32258357851774),  # 예시 위도
        'lng': random.uniform(127.12747748239246, 127.12753816657904) 
    }
    return JsonResponse(object_location)


def get_object_location2(request):
    # 예시 좌표 생성 (실제로는 depth 카메라에서 얻은 좌표를 사용), (단국대학교 공학관 주변 좌표 이용)
    object_location = {
        'lat': random.uniform(37.32055715151626, 37.320580731087915),  # 예시 위도
        'lng': random.uniform(127.12670339898712, 127.12677113066555) 
    }
    return JsonResponse(object_location)